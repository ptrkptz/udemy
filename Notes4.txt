4.44 class-based components
	functional components 
		simple content

	class components
		everything else
		Benefits
			easier code organization
			can use 'state' (another React system)
				easier to handle user input
			understand lifecycle events
				easier to do things when the app starts up

4.45 Application Overview
	users physical location
		from the browser
	current month
	change text and styling based on location + month

4.46
	framework build

4.47 getting users physical location

4.48 resetting location preferences
		the i on the browser, this kicks down a site information (next to the url)
			select 'Block'
			results in Console = message: "User denied Geolocation"

4.49 handling async operations with functional components
	Time start
		js file loaded by browser
		app component is created
		call geo location service
			this takes a bit of time
		app returns jsx, page starts to render
		.
		.
		.
		we get geolocation -- after waiting a bit

4.50 refactor functional component to class component
		(added to above)
		Tell the component to rerender itself with new info

	Rules of Class Components
		must be a JS class
		must extent (subclass) React.Component
		Must define a 'render' method that returns some amount of JSX

5.51 The Rules of State
 - only usable w/ class components
 	- hooks system ??
  - you will confuse props with state
  - 'state' is a js object that contains data relevant to a component
  - updating 'state' on a component causes the component to (almost)instanly rerender
  - state must be initialized when a component is created
  - state CAN  only  be updated using the function 'setState'

5.52 initialing state thorough constructors
Constructor is not required
Constructor is the first thing that is called when a new instance is spun up
	good place to initialize state
	Super -- 
		reference to the parents construtor functions
			ERROR: 'super has not been called'  if missing

5.53 updating state properties
5.54 app lifecycle walkthough
	- js file loaded to browser
	- instance of app component is created
	- app component constructor function is called
	- state object is created and assigned to the 'this.state' property
	- we call geolocation service
	- reat calls the the components render method
	- app returns jsx, get rendered to the page as html
	- we get geolocation 
	- we udpate our state object with a call to 'this.setState'
	- react see that we updated the state of a component
	- react calls out 'render' method a 2nd time
	- render method returns some (updated) JSX
	- react takes that JSC and updates content on the screen

5.55 handling errors gracefully


5.56 conditional rendering
	if(this.state.errorMessage && !this.state.lat) {
      return <div>Error: {this.state.errorMessage}</div>;
    }
    if (!this.state.errorMessage && this.state.lat) {
      return <div>Latitude: {this.state.lat}</div>;
    }
    return <div>Loading!</div>;

6.57 intro lifecycle methods
	- function we can optionally define inside our class based components

	constructor
	render (not optional)
	componentDidMount
	componentDidUpdate
	componentWillUnmount

